
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/upload-url": {
        get: operations["uploadAsset"];
    };
    "/user": {
        get: operations["getUser"];
        post: operations["createUser"];
        patch: operations["updateUser"];
    };
    "/mentor/search": {
        get: operations["searchMentor"];
    };
    "/mentor": {
        get: operations["getMentor"];
        post: operations["becomeMentor"];
        patch: operations["updateMentor"];
    };
    "/mentor/verifyEmail": {
        get: operations["sendVerificationEmail"];
        patch: operations["verifyEmail"];
    };
    "/withdrawl": {
        get: operations["getWithdrawls"];
        post: operations["askWithdrawl"];
        patch: operations["resolveWithdrawl"];
    };
    "/penalty": {
        get: operations["getPenalties"];
        post: operations["penaliseMentor"];
    };
    "/verify": {
        get: operations["getVerificationRequests"];
        post: operations["submitForVerification"];
        patch: operations["verifyMentor"];
    };
    "/mentor/disable": {
        patch: operations["disableMentor"];
    };
    "/schedule": {
        get: operations["getSchedule"];
        patch: operations["updateSchedule"];
    };
    "/university": {
        get: operations["getUniversities"];
        post: operations["registerUniversity"];
    };
    "/session": {
        get: operations["getSessions"];
        post: operations["createSession"];
        patch: operations["updateSession"];
    };
    "/payment": {
        get: operations["getPayments"];
        post: operations["getPaymentOrder"];
    };
}

export interface components {
    schemas: {
        SessionData: {
            sessions: components["schemas"]["Session"][];
        };
        UsersData: {
            users: components["schemas"]["User"][];
        };
        PaginationHelper: {
            nextPage?: number | null;
            total?: number;
        };
        Degree: "bachelors" | "masters" | "phd";
        Status: "alumni" | "current";
        Major: "STEM" | "Humanities" | "Commercial-Studies" | "Social-Sciences";
        UserUpdate: {
            institute?: string;
            campusPreference?: "urban" | "rural";
            profilePic?: string;
            name?: string;
            about?: string;
            facebook?: string;
            /** Required for mentor type */
            linkedIn?: string;
            interests?: string[];
        };
        ErrorSchema: {
            message: string;
            error: string;
            statusCode: number;
            data: { [key: string]: any } | null;
        };
        University: {
            name: string;
            searchCount: number;
            country: string;
        };
        UserCreate: {
            institute: string;
            campusPreference?: "urban" | "rural";
            profilePic?: string;
            name: string;
            about?: string;
            facebook?: string;
            /** Required for mentor type */
            linkedIn?: string;
            type: components["schemas"]["UserType"];
            interests: string[];
            mentorMeta?: components["schemas"]["MentorCreate"];
        };
        User: {
            institute: string;
            campusPreference?: "urban" | "rural";
            profilePic?: string;
            name: string;
            about?: string;
            facebook?: string;
            /** Required for mentor type */
            linkedIn?: string;
            email: string;
            id: string;
            type: components["schemas"]["UserType"];
            interests: string[];
            mentorMeta?: components["schemas"]["Mentor"];
        };
        /** In case of update action, all of the previous info must be provided to avoid loss of info */
        CampusInfo: {
            /** Should be hidden in frontend */
            verificationDocUrl?: string;
            /** Needs to be verified if mentor not an alumni */
            uniEmail?: {
                email: string;
                verified: boolean;
            } | null;
            uniName?: string;
            scores?: {
                gpa?: string;
                gmat?: string;
                sat?: string;
            };
            specialisation?: string;
            campusExperience?: string;
            scholarship?: string;
            placeOfStay?: "onCampus" | "offCampus";
            previousInstitute?: string;
            courseName?: string;
            yearOfGrad?: number;
            campusJob?: "yes" | "no";
        };
        MentorCreate: {
            status: components["schemas"]["Status"];
            degree: components["schemas"]["Degree"];
            major: components["schemas"]["Major"];
            countryOfOrigin: string;
            languages: string[];
            campusInfo: components["schemas"]["CampusInfo"];
            preferredCurrency?: string;
            countryOfStudy: string;
        };
        Mentor: {
            id: string;
            name: string;
            profilePic?: string;
            status: components["schemas"]["Status"];
            degree: components["schemas"]["Degree"];
            major: components["schemas"]["Major"];
            countryOfOrigin: string;
            languages: string[];
            campusInfo: components["schemas"]["CampusInfo"];
            /** The amount available for withdrawl after cut and penalties */
            amountAvailable: number;
            /** The amount withdrawn after cut and penalties including amount in waiting state */
            totalWithdrawn: number;
            preferredCurrency?: string;
            schedule: components["schemas"]["Schedule"] & { [key: string]: any };
            disabled: boolean;
            countryOfStudy: string;
            /** Epoch time */
            lastWithdrawn: number;
            profileState: "waiting" | "rejected" | "editing" | "verified";
        };
        Withdrawl: {
            id: string;
            mentor: components["schemas"]["Mentor"];
            /** Epoch time */
            date: number;
            amount: number;
            state: "waiting" | "paid";
        };
        PenaltyCreate: {
            mentorId: string;
            reason: string;
            sessionId: string;
        };
        Penalty: {
            id: string;
            mentor: string;
            reason: string;
            /** Epoch time */
            date: number;
            session: string;
            amountBefore: number;
        };
        UserType: "admin" | "user" | "mentor";
        Schedule: {
            /** Same as mentorID */
            id: string;
            days: {
                monday: components["schemas"]["MentorSlots"];
                tuesday: components["schemas"]["MentorSlots"];
                wednesday: components["schemas"]["MentorSlots"];
                thursday: components["schemas"]["MentorSlots"];
                friday: components["schemas"]["MentorSlots"];
                saturday: components["schemas"]["MentorSlots"];
                sunday: components["schemas"]["MentorSlots"];
            };
        };
        Slot: {
            /** The time in IST */
            start: string;
            /** The time in IST */
            end: string;
            /** Epoch time */
            lastBookedFor?: number;
        };
        MentorSlots: components["schemas"]["Slot"][];
        PaymentOrder: {
            /** JWT string with short expiry. Contains slots(without lastBookedFor), user, mentor and payment, etc */
            sessionDetails: string;
            currency: string;
            /** to be divided by 100 for display only */
            amount: number;
            /** the order_id */
            id: string;
        };
        Payment: {
            id: string;
            razorpayId: string;
            /** Payment can be made for multiple sessions */
            sessions: components["schemas"]["Session"][];
            currency: string;
            date: number;
            mentor: components["schemas"]["User"];
            user: components["schemas"]["User"];
            amount: number;
        };
        SessionDetail: {
            day: string;
            userEmail: string;
            currency: string;
            amount: number;
            orderId: string;
            mentor: string;
            user: string;
            slots: {
                bookingFor: number;
                /** The time in IST */
                start: string;
                /** The time in IST */
                end: string;
            }[];
        };
        Session: {
            payment: components["schemas"]["Payment"];
            discussionPoints?: string;
            id: string;
            zoomLink: string;
            mentor: components["schemas"]["User"];
            user: components["schemas"]["User"];
            date: number;
            slot: components["schemas"]["Slot"];
        };
    };
    responses: {
        /** Returns list of sessions */
        SessionResponse: {
            content: {
                "application/json": components["schemas"]["PaginationHelper"] &
                    components["schemas"]["SessionData"];
            };
        };
        /** Returns the matched Universities */
        UniversityResponse: {
            content: {
                "application/json": components["schemas"]["PaginationHelper"] & {
                    universities: components["schemas"]["University"][];
                };
            };
        };
        /** returns list of lean mentors */
        MentorResponse: {
            content: {
                "application/json": components["schemas"]["PaginationHelper"] & {
                    mentors: components["schemas"]["Mentor"][];
                };
            };
        };
        /** Returns list of user */
        UserResponse: {
            content: {
                "application/json": components["schemas"]["PaginationHelper"] &
                    components["schemas"]["UsersData"];
            };
        };
        /** Error response */
        ErrorResponse: {
            content: {
                "application/json": components["schemas"]["ErrorSchema"];
            };
        };
    };
    parameters: {
        IncludeTotal: "false" | "true";
        IdParam: string;
        /** returns the single resource */
        OptionalIdParam: string;
        CountParam: number;
        PageParam: number;
    };
    requestBodies: {
        UserUpdateBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        UserCreateBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
    };
}

export interface operations {
    uploadAsset: {
        parameters: {
            query: {
                mimeType: string;
                isProfilePic?: boolean;
            };
        };
        responses: {
            /** Returns the presigned url, that expires shortly */
            200: {
                content: {
                    "application/json": {
                        /** pre-signed url */
                        url?: string;
                        /** name of image */
                        Key?: string;
                    };
                };
            };
            400: components["responses"]["ErrorResponse"];
            500: components["responses"]["ErrorResponse"];
        };
    };
    getUser: {
        parameters: {
            query: {
                all?: "true" | "false";
                includeTotal?: components["parameters"]["IncludeTotal"];
                count?: components["parameters"]["CountParam"];
                page?: components["parameters"]["PageParam"];
            };
        };
        responses: {
            200: components["responses"]["UserResponse"];
        };
    };
    createUser: {
        parameters: {
            query: {
                adminKey?: string;
            };
        };
        responses: {
            /** User/Mentor sign up */
            200: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
        requestBody: components["requestBodies"]["UserCreateBody"];
    };
    updateUser: {
        responses: {
            /** User updated */
            200: unknown;
        };
        requestBody: components["requestBodies"]["UserUpdateBody"];
    };
    searchMentor: {
        parameters: {
            query: {
                count?: components["parameters"]["CountParam"];
                includeTotal?: components["parameters"]["IncludeTotal"];
                page?: components["parameters"]["PageParam"];
                uniName?: string;
                name?: string;
                countryOfStudy?: string;
                countryOfOrigin?: string;
                /** can contain multiple comma seperated values */
                major?: components["schemas"]["Major"];
                /** can contain multiple comma seperated values */
                status?: components["schemas"]["Status"];
                /** can contain multiple comma seperated values */
                degree?: components["schemas"]["Degree"];
            };
        };
        responses: {
            200: components["responses"]["MentorResponse"];
        };
    };
    getMentor: {
        parameters: {
            query: {
                /** returns the single resource */
                id?: components["parameters"]["OptionalIdParam"];
            };
        };
        responses: {
            /** ok */
            200: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    becomeMentor: {
        responses: {
            /** Created */
            200: unknown;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MentorCreate"];
            };
        };
    };
    updateMentor: {
        responses: {
            /** updated */
            200: unknown;
        };
        requestBody: {
            content: {
                "application/json": {
                    status?: components["schemas"]["Status"];
                    degree?: components["schemas"]["Degree"];
                    major?: components["schemas"]["Major"];
                    countryOfOrigin?: string;
                    languages?: string[];
                    campusInfo?: components["schemas"]["CampusInfo"];
                    preferredCurrency?: string;
                    countryOfStudy?: string;
                };
            };
        };
    };
    sendVerificationEmail: {
        responses: {
            /** Sends email */
            200: unknown;
        };
    };
    verifyEmail: {
        parameters: {
            query: {
                token: string;
            };
        };
        responses: {
            /** Email verified */
            200: unknown;
        };
    };
    getWithdrawls: {
        parameters: {
            query: {
                state?: "waiting" | "paid";
                count?: components["parameters"]["CountParam"];
                page?: components["parameters"]["PageParam"];
                includeTotal?: components["parameters"]["IncludeTotal"];
            };
        };
        responses: {
            /** ok */
            200: {
                content: {
                    "application/json": components["schemas"]["PaginationHelper"] & {
                        withdrawls: components["schemas"]["Withdrawl"][];
                    };
                };
            };
        };
    };
    askWithdrawl: {
        responses: {
            /** Creates a withdrawl */
            200: {
                content: {
                    "application/json": components["schemas"]["Withdrawl"];
                };
            };
        };
    };
    resolveWithdrawl: {
        parameters: {
            query: {
                id: components["parameters"]["IdParam"];
            };
        };
        responses: {
            /** ok */
            200: unknown;
        };
    };
    getPenalties: {
        parameters: {
            query: {
                all?: "true" | "false";
                page?: components["parameters"]["PageParam"];
                count?: components["parameters"]["CountParam"];
                includeTotal?: components["parameters"]["IncludeTotal"];
            };
        };
        responses: {
            /** Ok */
            200: {
                content: {
                    "application/json": components["schemas"]["PaginationHelper"] & {
                        penalties: components["schemas"]["Penalty"][];
                    };
                };
            };
        };
    };
    penaliseMentor: {
        parameters: {
            query: {
                id: components["parameters"]["IdParam"];
            };
        };
        responses: {
            /** ok */
            200: unknown;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PenaltyCreate"];
            };
        };
    };
    getVerificationRequests: {
        parameters: {
            query: {
                includeTotal?: components["parameters"]["IncludeTotal"];
                page?: components["parameters"]["PageParam"];
                count?: components["parameters"]["CountParam"];
            };
        };
        responses: {
            /** Returns admins submitted for verification */
            200: {
                content: {
                    "application/json": components["schemas"]["PaginationHelper"] & {
                        mentors: components["schemas"]["Mentor"][];
                    };
                };
            };
        };
    };
    submitForVerification: {
        responses: {
            /** Submits for verification */
            200: unknown;
        };
    };
    verifyMentor: {
        parameters: {
            query: {
                action: "accept" | "decline";
                id: components["parameters"]["IdParam"];
            };
        };
        responses: {
            /** Accepts/decline a mentor profile */
            200: unknown;
        };
    };
    disableMentor: {
        parameters: {
            query: {
                action: "disable" | "enable";
                id: components["parameters"]["IdParam"];
            };
        };
        responses: {
            /** Accepts/decline a mentor profile */
            200: unknown;
        };
    };
    getSchedule: {
        parameters: {
            query: {
                id: components["parameters"]["IdParam"];
            };
        };
        responses: {
            /** 200 Response */
            200: {
                content: {
                    "application/json": components["schemas"]["Schedule"];
                };
            };
        };
    };
    updateSchedule: {
        responses: {
            /** Ok */
            200: unknown;
        };
        requestBody: {
            content: {
                "application/json": {
                    day:
                        | "monday"
                        | "tuesday"
                        | "wednesday"
                        | "thursday"
                        | "friday"
                        | "saturday"
                        | "sunday";
                    slots: components["schemas"]["MentorSlots"];
                };
            };
        };
    };
    getUniversities: {
        parameters: {
            query: {
                includeTotal?: components["parameters"]["IncludeTotal"];
                page?: components["parameters"]["PageParam"];
                count?: components["parameters"]["CountParam"];
            };
        };
        responses: {
            200: components["responses"]["UniversityResponse"];
        };
    };
    registerUniversity: {
        responses: {
            /** Returns the registered University */
            200: {
                content: {
                    "application/json": components["schemas"]["University"];
                };
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    country: string;
                };
            };
        };
    };
    getSessions: {
        parameters: {
            query: {
                includeTotal?: components["parameters"]["IncludeTotal"];
                page?: components["parameters"]["PageParam"];
                count?: components["parameters"]["CountParam"];
                /** returns the single resource */
                id?: components["parameters"]["OptionalIdParam"];
                type: "past" | "upcoming";
            };
        };
        responses: {
            200: components["responses"]["SessionResponse"];
        };
    };
    createSession: {
        responses: {
            /** Created */
            200: unknown;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** JWT string returned from POST /payment */
                    sessionDetail: string;
                };
            };
        };
    };
    updateSession: {
        parameters: {
            query: {
                id: components["parameters"]["IdParam"];
            };
        };
        responses: {
            /** ok */
            200: unknown;
        };
        requestBody: {
            content: {
                "application/json": {
                    discussionPoints?: string;
                };
            };
        };
    };
    getPayments: {
        parameters: {
            query: {
                includeTotal?: components["parameters"]["IncludeTotal"];
                count?: components["parameters"]["CountParam"];
                page?: components["parameters"]["PageParam"];
            };
        };
        responses: {
            /** 200 Response */
            200: {
                content: {
                    "application/json": components["schemas"]["PaginationHelper"] & {
                        payments: components["schemas"]["Payment"][];
                    };
                };
            };
        };
    };
    getPaymentOrder: {
        responses: {
            /** 200 Response */
            200: {
                content: {
                    "application/json": components["schemas"]["PaymentOrder"];
                };
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    mentorId: string;
                    /** To get the exact payable amount, one can only book slots of a one day at a time. */
                    slots: {
                        day: string;
                        bookingFor: number;
                        start: string;
                    }[];
                };
            };
        };
    };
}

export interface external {}

